{"version":3,"file":"formatters.js","sourceRoot":"","sources":["../../src/api/formatters.ts"],"names":[],"mappings":";;;;;;AACA,yCAAqC;AAKrC,mEAAmD;AAEnD,8DAAyD;AACzD,gFAA2E;AAIpE,KAAK,UAAU,oBAAoB,CAAC,EACzC,GAAG,EACH,GAAG,EACH,MAAM,EACN,MAAM,EACN,aAAa,EACb,gBAAgB,EAChB,kBAAkB,EAClB,aAAa,EACb,kBAAkB,EAClB,aAAa,GAad;IACC,MAAM,UAAU,GAA+B,EAAE,CAAA;IAEjD,KAAK,UAAU,mBAAmB,CAChC,MAAwB,EACxB,MAAc,EACd,SAAiB;QAEjB,IAAI,SAAS,KAAK,cAAc,IAAI,CAAE,MAAyB,CAAC,KAAK,EAAE;YACrE,MAAM,CAAC,IAAI,CACT,sDAAsD,MAAM,oDAAoD,CACjH,CAAA;YACD,SAAS,GAAG,UAAU,CAAA;SACvB;QACD,MAAM,cAAc,GAAG,MAAM,IAAA,8CAAqB,EAAC,SAAS,EAAE,GAAG,CAAC,CAAA;QAClE,IAAI,OAAO,cAAc,KAAK,UAAU,EAAE;YACxC,MAAM,WAAW,GAAG;gBAClB,GAAG;gBACH,GAAG;gBACH,gBAAgB;gBAChB,kBAAkB;gBAClB,GAAG,EAAE,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC;gBAC9B,iBAAiB,EAAE,aAAa,CAAC,OAAO;gBACxC,MAAM;gBACN,OAAO,EACL,MAAM,KAAK,MAAM;oBACf,CAAC,CAAC,KAAK,IAAI,EAAE,CAAC,MAAM,OAAO,CAAC,OAAO,EAAE;oBACrC,CAAC,CAAC,IAAA,qBAAS,EAAM,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBAC7C,kBAAkB;aACnB,CAAA;YACD,MAAM,SAAS,GAAG,MAAM,iBAAgB,CAAC,KAAK,CAC5C,cAAc,EACd,WAAW,CACZ,CAAA;YACD,UAAU,CAAC,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAA;SAClD;aAAM;YACL,MAAM,aAAa,CAAC,aAAa,CAC/B,cAAc,EACd,aAAa,CAAC,OAAO,EACrB,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAC1B,CAAA;YACD,IAAI,MAAM,KAAK,MAAM,EAAE;gBACrB,UAAU,CAAC,IAAI,CAAC,IAAA,qBAAS,EAAM,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;aACzD;SACF;IACH,CAAC;IAED,MAAM,mBAAmB,CAAC,MAAM,EAAE,QAAQ,EAAE,aAAa,CAAC,MAAM,CAAC,CAAA;IACjE,KAAK,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE;QACrE,MAAM,mBAAmB,CACvB,MAAM,IAAA,4BAAY,EAAC,MAAM,EAAE,aAAa,EAAE,GAAG,EAAE,MAAM,CAAC,EACtD,MAAM,EACN,SAAS,CACV,CAAA;KACF;IAED,OAAO,KAAK;QACV,MAAM,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,SAAS,EAAE,CAAC,CAAC,CAAA;IAC/D,CAAC,CAAA;AACH,CAAC;AAlFD,oDAkFC","sourcesContent":["import { EventEmitter } from 'node:events'\nimport { promisify } from 'node:util'\nimport { WriteStream as TtyWriteStream } from 'node:tty'\nimport { IFormatterStream } from '../formatter'\nimport { EventDataCollector } from '../formatter/helpers'\nimport { SupportCodeLibrary } from '../support_code_library_builder/types'\nimport FormatterBuilder from '../formatter/builder'\nimport { ILogger } from '../logger'\nimport { createStream } from '../formatter/create_stream'\nimport { resolveImplementation } from '../formatter/resolve_implementation'\nimport { PluginManager } from '../plugin'\nimport { IRunOptionsFormats } from './types'\n\nexport async function initializeFormatters({\n  env,\n  cwd,\n  stdout,\n  logger,\n  onStreamError,\n  eventBroadcaster,\n  eventDataCollector,\n  configuration,\n  supportCodeLibrary,\n  pluginManager,\n}: {\n  env: NodeJS.ProcessEnv\n  cwd: string\n  stdout: IFormatterStream\n  stderr: IFormatterStream\n  logger: ILogger\n  onStreamError: () => void\n  eventBroadcaster: EventEmitter\n  eventDataCollector: EventDataCollector\n  configuration: IRunOptionsFormats\n  supportCodeLibrary: SupportCodeLibrary\n  pluginManager: PluginManager\n}): Promise<() => Promise<void>> {\n  const cleanupFns: Array<() => Promise<void>> = []\n\n  async function initializeFormatter(\n    stream: IFormatterStream,\n    target: string,\n    specifier: string\n  ): Promise<void> {\n    if (specifier === 'progress-bar' && !(stream as TtyWriteStream).isTTY) {\n      logger.warn(\n        `Cannot use 'progress-bar' formatter for output to '${target}' as not a TTY. Switching to 'progress' formatter.`\n      )\n      specifier = 'progress'\n    }\n    const implementation = await resolveImplementation(specifier, cwd)\n    if (typeof implementation === 'function') {\n      const typeOptions = {\n        env,\n        cwd,\n        eventBroadcaster,\n        eventDataCollector,\n        log: stream.write.bind(stream),\n        parsedArgvOptions: configuration.options,\n        stream,\n        cleanup:\n          stream === stdout\n            ? async () => await Promise.resolve()\n            : promisify<any>(stream.end.bind(stream)),\n        supportCodeLibrary,\n      }\n      const formatter = await FormatterBuilder.build(\n        implementation,\n        typeOptions\n      )\n      cleanupFns.push(async () => formatter.finished())\n    } else {\n      await pluginManager.initFormatter(\n        implementation,\n        configuration.options,\n        stream.write.bind(stream)\n      )\n      if (stream !== stdout) {\n        cleanupFns.push(promisify<any>(stream.end.bind(stream)))\n      }\n    }\n  }\n\n  await initializeFormatter(stdout, 'stdout', configuration.stdout)\n  for (const [target, specifier] of Object.entries(configuration.files)) {\n    await initializeFormatter(\n      await createStream(target, onStreamError, cwd, logger),\n      target,\n      specifier\n    )\n  }\n\n  return async function () {\n    await Promise.all(cleanupFns.map((cleanupFn) => cleanupFn()))\n  }\n}\n"]}
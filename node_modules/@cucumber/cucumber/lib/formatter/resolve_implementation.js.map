{"version":3,"file":"resolve_implementation.js","sourceRoot":"","sources":["../../src/formatter/resolve_implementation.ts"],"names":[],"mappings":";;;;;;AAAA,wDAA+B;AAC/B,+CAA0C;AAC1C,iEAA0D;AAGnD,KAAK,UAAU,qBAAqB,CACzC,SAAiB,EACjB,GAAW;IAEX,IAAI,iBAAO,CAAC,SAAS,CAAC,EAAE;QACtB,OAAO,iBAAO,CAAC,SAAS,CAAC,CAAA;KAC1B;SAAM;QACL,MAAM,QAAQ,GAAG,MAAM,IAAA,wBAAU,EAAC,SAAS,EAAE,GAAG,CAAC,CAAA;QACjD,MAAM,KAAK,GAAG,IAAA,wCAAiB,EAAC,QAAQ,CAAC,CAAA;QACzC,IAAI,CAAC,KAAK,EAAE;YACV,MAAM,IAAI,KAAK,CAAC,GAAG,SAAS,mCAAmC,CAAC,CAAA;SACjE;QACD,OAAO,KAAK,CAAA;KACb;AACH,CAAC;AAdD,sDAcC","sourcesContent":["import builtin from './builtin'\nimport { importCode } from './import_code'\nimport { findClassOrPlugin } from './find_class_or_plugin'\nimport { FormatterImplementation } from './index'\n\nexport async function resolveImplementation(\n  specifier: string,\n  cwd: string\n): Promise<FormatterImplementation> {\n  if (builtin[specifier]) {\n    return builtin[specifier]\n  } else {\n    const imported = await importCode(specifier, cwd)\n    const found = findClassOrPlugin(imported)\n    if (!found) {\n      throw new Error(`${specifier} does not export a function/class`)\n    }\n    return found\n  }\n}\n"]}
{"version":3,"file":"import_code.js","sourceRoot":"","sources":["../../src/formatter/import_code.ts"],"names":[],"mappings":";;;;;;AAAA,uCAAwC;AACxC,0DAA4B;AAErB,KAAK,UAAU,UAAU,CAAC,SAAiB,EAAE,GAAW;IAC7D,IAAI;QACF,IAAI,UAAU,GAAiB,SAAS,CAAA;QACxC,IAAI,SAAS,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;YAC7B,UAAU,GAAG,IAAA,wBAAa,EAAC,mBAAI,CAAC,OAAO,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC,CAAA;SACzD;aAAM,IAAI,SAAS,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE;YAC1C,UAAU,GAAG,IAAI,GAAG,CAAC,SAAS,CAAC,CAAA;SAChC;QACD,OAAO,MAAM,MAAM,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAA;KAC3C;IAAC,OAAO,CAAC,EAAE;QACV,MAAM,IAAI,KAAK,CAAC,8BAA8B,SAAS,EAAE,EAAE;YACzD,KAAK,EAAE,CAAC;SACT,CAAC,CAAA;KACH;AACH,CAAC;AAdD,gCAcC","sourcesContent":["import { pathToFileURL } from 'node:url'\nimport path from 'node:path'\n\nexport async function importCode(specifier: string, cwd: string): Promise<any> {\n  try {\n    let normalized: URL | string = specifier\n    if (specifier.startsWith('.')) {\n      normalized = pathToFileURL(path.resolve(cwd, specifier))\n    } else if (specifier.startsWith('file://')) {\n      normalized = new URL(specifier)\n    }\n    return await import(normalized.toString())\n  } catch (e) {\n    throw new Error(`Failed to import formatter ${specifier}`, {\n      cause: e,\n    })\n  }\n}\n"]}